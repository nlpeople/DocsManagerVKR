from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from django.db.models.signals import post_save
from django.dispatch import receiver
from asgiref.sync import sync_to_async
from Docs.models import Profile, DocumentFile, DocumentComment, User
from dotenv import load_dotenv
import logging
import asyncio
import os

load_dotenv()
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
application = None

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
async def get_profile_by_code(code: str):
    try:
        return await Profile.objects.aget(telegram_token=code)
    except Profile.DoesNotExist:
        return None

async def get_profile_by_telegram_id(telegram_id: str):
    try:
        return await Profile.objects.aget(telegram_id=telegram_id)
    except Profile.DoesNotExist:
        return None

async def save_profile(profile: Profile):
    await profile.asave()

async def get_document_creators(document_id):
    from Docs.models import Document
    try:
        document = await Document.objects.aget(pk=document_id)
        return [creator async for creator in document.creators.all()]
    except Document.DoesNotExist:
        return []

async def send_telegram_notification(telegram_id: str, message: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –ø–æ telegram_id."""
    try:
        await application.bot.send_message(chat_id=telegram_id, text=message)
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å telegram_id {telegram_id}: {message}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å telegram_id {telegram_id}: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    telegram_id = str(update.effective_user.id)
    username = update.effective_user.username
    args = context.args
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} (@{username}) –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª /start —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: {args}")

    if args:
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∫–æ–¥, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –ø—Ä–∏–≤—è–∑–∫—É
        await bind_telegram(update, context)
    else:
        profile = await get_profile_by_telegram_id(telegram_id)
        if profile:
            keyboard = [[InlineKeyboardButton("–û—Ç–≤—è–∑–∞—Ç—å Telegram", callback_data='unbind_telegram')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "–í–∞—à Telegram –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –í—ã –º–æ–∂–µ—Ç–µ –µ–≥–æ –æ—Ç–≤—è–∑–∞—Ç—å.",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                "–í–∞—à Telegram –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞ —Å–∞–π—Ç–µ, —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫—É."
            )

@sync_to_async
def get_user_username(user_id):
    try:
        user = User.objects.get(pk=user_id)
        return user.username
    except User.DoesNotExist:
        return "unknown"

async def bind_telegram(update: Update, context: ContextTypes.DEFAULT_TYPE):
    telegram_id = str(update.effective_user.id)
    username = update.effective_user.username
    args = context.args

    if args:
        code = args[0]
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} (@{username}) –ø—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–∏–≤—è–∑–∞—Ç—å—Å—è —Å –∫–æ–¥–æ–º {code}")
        profile = await get_profile_by_code(code)

        if profile:
            if profile.telegram_id:
                await update.message.reply_text("–≠—Ç–æ—Ç –∫–æ–¥ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–º—É –∫–æ–¥—É: {code}")
                return

            existing = await get_profile_by_telegram_id(telegram_id)
            if existing:
                await update.message.reply_text("–≠—Ç–æ—Ç Telegram —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.")
                logger.warning(f"Telegram ID {telegram_id} —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –ø—Ä–æ—Ñ–∏–ª—é.")
                return

            profile.telegram_id = telegram_id
            profile.telegram_token = None
            await save_profile(profile)

            user_username = await get_user_username(profile.user_id)
            logger.info(f"Telegram ID {telegram_id} –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_username}")

            await update.message.reply_text("‚úÖ –ü—Ä–∏–≤—è–∑–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        else:
            await update.message.reply_text("‚õî –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏ –∏–ª–∏ –æ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")
            logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏: {code}")
    else:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É —Å –∫–æ–¥–æ–º, —á—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ –ø–µ—Ä–µ–¥–∞–ª –∫–æ–¥.")

async def unbind_telegram(update: Update, context: ContextTypes.DEFAULT_TYPE):
    telegram_id = str(update.effective_user.id)
    username = update.effective_user.username
    profile = await get_profile_by_telegram_id(telegram_id)

    if profile:
        profile.telegram_id = None
        await save_profile(profile)
        await update.callback_query.answer("Telegram –æ—Ç–≤—è–∑–∞–Ω.")
        await update.callback_query.edit_message_text("–í–∞—à Telegram –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} (@{username}) –æ—Ç–≤—è–∑–∞–ª Telegram")
    else:
        await update.callback_query.answer("Telegram –Ω–µ –±—ã–ª –ø—Ä–∏–≤—è–∑–∞–Ω.")
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–≤—è–∑–∫–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ Telegram ID: {telegram_id}")

def start_bot_logic():
    global application
    logger.info("üöÄ Telegram-–±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("bind", bind_telegram))
    application.add_handler(CallbackQueryHandler(unbind_telegram, pattern='^unbind_telegram$'))

    logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
    application.run_polling()

if __name__ == "__main__":
    start_bot_logic()